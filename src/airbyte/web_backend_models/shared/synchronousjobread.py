"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import jobconfigtype_enum as shared_jobconfigtype_enum
from ..shared import logread as shared_logread
from airbyte import utils
from dataclasses_json import Undefined, dataclass_json
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SynchronousJobRead:
    
    config_type: shared_jobconfigtype_enum.JobConfigTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configType') }})
    created_at: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt') }})
    ended_at: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endedAt') }})
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    succeeded: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('succeeded') }})
    config_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configId'), 'exclude': lambda f: f is None }})
    r"""only present if a config id was provided."""
    connector_configuration_updated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorConfigurationUpdated'), 'exclude': lambda f: f is None }})
    logs: Optional[shared_logread.LogRead] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logs'), 'exclude': lambda f: f is None }})
    