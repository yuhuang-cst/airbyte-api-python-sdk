"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

# from __future__ import annotations
import dataclasses
from ..shared import fieldadd as shared_fieldadd
from ..shared import fieldremove as shared_fieldremove
from ..shared import fieldschemaupdate as shared_fieldschemaupdate
from airbyte import utils
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import Optional

class FieldTransformTransformTypeEnum(str, Enum):
    ADD_FIELD = 'add_field'
    REMOVE_FIELD = 'remove_field'
    UPDATE_FIELD_SCHEMA = 'update_field_schema'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FieldTransform:
    r"""Describes the difference between two Streams."""
    
    breaking: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('breaking') }})
    field_name: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldName') }})
    r"""A field name is a list of strings that form the path to the field."""
    transform_type: FieldTransformTransformTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transformType') }})
    add_field: Optional[shared_fieldadd.FieldAdd] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addField'), 'exclude': lambda f: f is None }})
    remove_field: Optional[shared_fieldremove.FieldRemove] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('removeField'), 'exclude': lambda f: f is None }})
    update_field_schema: Optional[shared_fieldschemaupdate.FieldSchemaUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateFieldSchema'), 'exclude': lambda f: f is None }})
    